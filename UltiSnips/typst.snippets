global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal


snippet template "Basic template" b
#set text(
		font: ("New Computer Modern", "Source Han Serif SC"), lang: "zh", region: "cn",
)
#set heading(numbering: "1. ")
#let numbered_eq(content) = math.equation(
		block: true,
		numbering: "(1)",
		content,
)
$0
endsnippet

snippet fig "Figure environment" b
#figure(
		image("$1", width: ${2:80%}),
		caption: [${3:$1}],
) <${4:${1/\W+/-/g}}>
endsnippet

snippet =< "implied by" Ai
arrow.l.double
endsnippet

context "math()"
snippet iff "iff" Ai
bold(iff)
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
$
${1:${VISUAL}}
$ $0
endsnippet

snippet ali "Align" bA
$
${1:${VISUAL}}
$ $0
endsnippet

snippet ald "Aligned" bA
#numbering_eq($ $1 $) $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_(`!p snip.rv = match.group(2)`)
endsnippet


snippet == "equals" iA
&= $1 \\
endsnippet

context "math()"
snippet =- "equiva" iA
eq.triple
endsnippet

context "math()"
snippet -= "equivb" iA
eq.triple
endsnippet

snippet != "equals" iA
eq.not
endsnippet

context "math()"
snippet ceil "ceil" iA
ceil($1) $0
endsnippet

context "math()"
snippet abs "abs" iA
abs($1) $0
endsnippet

context "math()"
snippet norm "norm" iA
norm($1) $0
endsnippet

context "math()"
snippet round "round" iA
round($1) $0
endsnippet

context "math()"
snippet floor "floor" iA
floor($1) $0
endsnippet

snippet pmat "pmat" iA
mat(
	$1;
	delim: "("
) $0
endsnippet

snippet bmat "bmat" iA
mat(
	$1;
	delim: "["
) $0
endsnippet

context "math()"
snippet () "left( right)" iA
( ${1:${VISUAL}} ) $0
endsnippet

snippet lr "left( right)" i
( ${1:${VISUAL}} ) $0
endsnippet

snippet lr( "left( right)" i
( ${1:${VISUAL}} ) $0
endsnippet

snippet lr| "left| right|" i
abs(${1:${VISUAL}}) $0
endsnippet

snippet lr{ "left\{ right\}" i
{${1:${VISUAL}}} $0
endsnippet

snippet lrb "left\{ right\}" i
{${1:${VISUAL}}} $0
endsnippet

snippet lr[ "left[ right]" i
[${1:${VISUAL}}] $0
endsnippet

snippet lra "leftangle rightangle" i
angle.l ${1:${VISUAL}} angle.r $0
endsnippet

context "math()"
snippet conj "conjugate" iA
overline{$1}$0
endsnippet

snippet sum "sum" w
sum_(${1:n=1})^(${2:oo}) ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
sum_(${1:k}=${2:0})^(${3:oo}) ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
lim_(${1:n} arrow.r ${2:oo}) 
endsnippet

snippet limsup "limsup" w
limits(limsup)_(${1:n} arrow.r ${2:oo}) 
endsnippet

snippet prod "product" w
product_{${1:n=${2:1}}}^{${3:oo}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
(partial ${1:V})(partial ${2:x}) $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
sqrt(${1:${VISUAL}}) $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^($1)$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^(($1))$0
endsnippet

snippet ^^ "supscript" iA
^($1) $0
endsnippet

snippet __ "subscript" iA
_($1)$0
endsnippet

context "math()"
snippet oo "oo" iA
oo
endsnippet

context "math()"
snippet <= "leq" iA
lt.eq.slant
endsnippet

context "math()"
snippet >= "geq" iA
gt.eq.slant
endsnippet

context "math()"
snippet +- "pos or neg" iA
plus.minus
endsnippet

context "math()"
snippet EE "exists" iA
exists 
endsnippet

context "math()"
snippet AA "forall" iA
forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_(n)
endsnippet

context "math()"
snippet ynn "yn" iA
y_(n)
endsnippet


context "math()"
snippet xii "xi" iA
x_(i)
endsnippet

context "math()"
snippet yii "yi" iA
y_(i)
endsnippet

context "math()"
snippet xjj "xj" iA
x_(j)
endsnippet

context "math()"
snippet yjj "yj" iA
y_(j)
endsnippet

context "math()"
snippet xp1 "x" iA
x_(n+1)
endsnippet

context "math()"
snippet xmm "x" iA
x_(m)
endsnippet

snippet R0+ "R0+" iA
RR_0^+
endsnippet

snippet lll "l" iA
ell
endsnippet

context "math()"
snippet nab "nabla" iA
nabla 
endsnippet

context "math()"
snippet xx "cross" iA
times 
endsnippet

priority 100
snippet ** "cdot" iA
dot.op 
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
integral_(${1:-oo})^(${2:oo}) ${3:${VISUAL}} $0
endsnippet

priority 100
context "math()"
snippet -> "to" iA
arrow.r 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
arrow.l.r
endsnippet

context "math()"
snippet !> "mapsto" iA
arrow.r.bar
endsnippet

context "math()"
snippet inv "inverse" iA
^(-1)
endsnippet

context "math()"
snippet compl "complement" iA
^(c)
endsnippet

context "math()"
snippet \\\ "setminus" iA
backslash
endsnippet

snippet >> ">>" iA
gt.double
endsnippet

snippet << "<<" iA
lt.double
endsnippet


snippet ~~ "~" iA
tilde.op
endsnippet

snippet ~= "~" iA
approx
endsnippet

context "math()"
snippet set "set" wA
{$1} $0
endsnippet

snippet || "mid" iA
 mid 
endsnippet


context "math()"
snippet cc "subset" Ai
 subset 
endsnippet

snippet notin "not in " iA
in.not
endsnippet

context "math()"
snippet inn "in " iA
in 
endsnippet

snippet Nn "cap" iA
sect
endsnippet

snippet UU "cup" iA
union
endsnippet

snippet uuu "bigcup" iA
union.big
endsnippet

snippet nnn "bigcap" iA
sect.big
endsnippet

snippet <! "normal" iA
triangle.stroked.l
endsnippet

snippet <> "hokje" iA
diamond.stroked
endsnippet


priority 10
context "math()"
snippet "bar" "bar" riA
overline($1)$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
overline(`!p snip.rv=match.group(1)`)
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
hat($1)$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
hat(`!p snip.rv=match.group(1)`)
endsnippet

# vim:ft=snippets
